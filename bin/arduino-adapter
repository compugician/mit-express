#!/usr/bin/env node

var serialport = require("serialport");
var io = require('socket.io-client');

serialport.list(function (err, ports) {
  ports.forEach(function(port) {
    //TODO detect the correct port here instead of hardcoding
    console.log(port.comName); 
  });
});

var serial = new serialport.SerialPort("COM5", {
  baudrate: 9600
});

var socket = io('http://localhost:3000');

var lastData, dx, dy, xdir, ydir, line;
var timeSinceLastSend = Date.now();
var i = 0;
serial.on("open", function () {
  console.log('serial opened');

  socket.on('point-client', function (data) {
    // console.log(data);
    if (lastData && Date.now() - timeSinceLastSend > 300) {
	  // send absolute mouse position. Need to add 8 (for some reason the top left corner is (-8, -8))
	  line = Math.floor(data.x) + " " + Math.floor(data.y) 
			 + " " + data.colorIdx + " " + data.flow;
	  i += 1;
      console.log(i + ": " + line);

      serial.write(line + "\n", function(err, results) {
        if (err) {
          console.error('err ' + err);
        }
      });
	  timeSinceLastSend = Date.now();
    }
    lastData = data;
	
  });

  process.stdin.resume(); //so the program will not close instantly

  function exitHandler(options, err) {
      if (options.cleanup) {
        console.log("serial closed");
        serial.close();
      }
      if (err) console.log(err.stack);
      if (options.exit) process.exit();
  }

  //do something when app is closing
  process.on('exit', exitHandler.bind(null,{cleanup:true}));

  //catches ctrl+c event
  process.on('SIGINT', exitHandler.bind(null, {exit:true}));

  //catches uncaught exceptions
  process.on('uncaughtException', exitHandler.bind(null, {exit:true}));

});
