#!/usr/bin/env node

var fs = require('fs');
// file is included here:
eval(fs.readFileSync('./machine-constants.js')+'');

var serialport = require("serialport");
var io = require('socket.io-client');
var dataQueue = [] //FIFO

serialport.list(function (err, ports) {
	var portsList = "Serial Ports On This Machine:\n";
	ports.forEach(function(port) {
		portsList+=" -- '"+port.comName+"'\n"; 
	});
	console.log(portsList);
});

var airbrushSerial = new serialport.SerialPort(AIRBRUSH_PORT_NAME, {
	baudrate: 115200,
	parser: serialport.parsers.readline("\n")
});

var gantrySerial = new serialport.SerialPort(GANTRY_PORT_NAME, {
	baudrate: 115200,
	parser: serialport.parsers.readline("\n")
});

var socket = io('http://localhost:3000');

var lastAirbrushData, line;
var timeSinceLastAirbrushSend = Date.now(), timeSinceLastGantrySend = Date.now();

airbrushSerial.on("data", function (data) {
	console.log("A:" + data);
	//socket.emit("received-from-airbrush", data);
});

gantrySerial.on("data", function (data) {
	console.log("B:" + data);
	//socket.emit("received-from-gantry", data);
});


airbrushSerial.on("open", function () {
	console.log('airbrushSerial opened');

	socket.on('point-client', function (data) {
		var x = Math.floor(data.x)
		var y = Math.floor(data.y)

		line = "^" + x + " " + y + " " + data.colorIdx + " " + data.flow;
		dataQueue.push(line);
		
		do {
			nextData = dataQueue.shift();
		} while (dataQueue.join("\n").length >= 1024); //only retain the most recent 1024 bits of data

		// 200ms gives the servos enough time to update (arduino requires 50 ms delay)
		if (Date.now() - timeSinceLastAirbrushSend > 200) {
			console.log(nextData + "\n");
			airbrushSerial.write(nextData + "\n", function(err, results) {
				if (err) {
				  console.error('err ' + err);
				}
			});
			//socket.emit('sent-to-airbrush', nextData);
			timeSinceLastAirbrushSend = Date.now();
			dataQueue = []
		}
		
		lastAirbrushData= data;
	
	});

	process.stdin.resume(); //so the program will not close instantly

	function exitHandler(options, err) {
		if (options.cleanup) {
			console.log("airbrushSerial closed");
			airbrushSerial.close();
		}
		if (err) console.log(err.stack);
		if (options.exit) process.exit();
	}

	//do something when app is closing
	process.on('exit', exitHandler.bind(null,{cleanup:true}));

	//catches ctrl+c event
	process.on('SIGINT', exitHandler.bind(null, {exit:true}));

	//catches uncaught exceptions
	process.on('uncaughtException', exitHandler.bind(null, {exit:true}));

});


var lastGantryData = {x:0,y:0};

gantrySerial.on("open", function () {
	console.log('gantrySerialopened');
	//10000
	var lastGantryMsgSent = "";
	
	socket.on('point-client', function (data) {
		var x = Math.floor(data.x/10000 * 620); // assumes the data is already converted to steps
		var y = 620-Math.floor(data.y/10000 * 620);
		
		var dx = lastGantryData.x == undefined ? x : Math.abs(x - lastGantryData.x);
		var dy = lastGantryData.y == undefined ? y : Math.abs(y - lastGantryData.y);
		
		// 70ms gives the servos enough time to update (arduino requires 50 ms delay)
		// only move if the difference in point position from last send is > 5 pixels in some direction
		console.log("Dx:"+dx+" Dy:"+dy);
		if ((Date.now() - timeSinceLastGantrySend > 200) && (dx > 5 || dy > 5)) {
			var gcode = "G01 X" + x + " Y" + y + " F50000\n"
			console.log("G->"+gcode);
			gantrySerial.write(gcode);
			
			timeSinceLastGantrySend = Date.now();
			lastGantryData = {x: x, y: y};
			lastGantryMsgSent = gcode;
			//socket.emit('msg-sent-to-gantry', lastGantryMsgSent);
		}
			
	});
	
	socket.on('gcode-msg', function(gcode){
		gantrySerial.write(gcode);
		console.log("wrote from client.html: " + gcode);
		lastGantryMsgSent = gcode;
		//socket.emit('msg-sent-to-gantry', lastGantryMsgSent); // 
	});

	process.stdin.resume(); //so the program will not close instantly

	function exitHandler(options, err) {
		if (options.cleanup) {
			console.log("gantrySerial closed");
			airbrushSerial.close();
		}
		if (err) console.log(err.stack);
		if (options.exit) process.exit();
	}

	//do something when app is closing
	process.on('exit', exitHandler.bind(null,{cleanup:true}));

	//catches ctrl+c event
	process.on('SIGINT', exitHandler.bind(null, {exit:true}));

	//catches uncaught exceptions
	process.on('uncaughtException', exitHandler.bind(null, {exit:true}));

});
